from unittest.mock import MagicMock, patch

import pytest
from catboost import CatBoostClassifier
from pytest import fixture
import pandas as pd
import numpy as np

from src.interface.prediction.models import CategoryCatboost


# mock_predict_proba = MagicMock(
#     return_value=np.array([[5.49673140e-02, 8.21512543e-04, 1.73899121e-03, 9.85441069e-03,
#                             8.34885338e-01, 5.12616346e-04, 2.60677866e-02, 1.12498860e-03,
#                             3.04645233e-02, 1.00922501e-04, 1.61892134e-02, 3.36193151e-03,
#                             1.42718628e-03, 8.25539631e-04, 7.13452307e-05, 1.17919627e-04,
#                             6.84432045e-04, 5.46536091e-04, 9.95941401e-03, 1.42391469e-03,
#                             3.31117565e-03, 3.61039088e-05, 4.12240938e-05, 1.17454819e-04,
#                             9.14022983e-05, 3.92574691e-05, 4.52015189e-05, 1.65989573e-04,
#                             9.87226482e-05, 2.29032803e-04, 1.21336762e-04, 8.41306453e-05,
#                             1.34464831e-04, 1.13427497e-04, 2.25238826e-04],
#                            [9.47240166e-03, 1.80419661e-03, 1.96779106e-02, 1.42817608e-02,
#                             2.01999900e-01, 7.81831901e-03, 5.08313061e-01, 1.44355179e-02,
#                             6.34441994e-03, 6.90736866e-04, 5.44872809e-02, 3.44500560e-02,
#                             7.19085430e-03, 1.61321898e-02, 8.47484425e-04, 1.69529578e-03,
#                             1.87346030e-02, 4.61086531e-03, 3.15885933e-03, 5.03863710e-03,
#                             6.29152491e-02, 3.07906496e-04, 4.25472044e-04, 1.20738409e-03,
#                             3.78144773e-04, 4.03342867e-04, 5.02792084e-04, 4.57957032e-04,
#                             2.38272900e-04, 3.84894247e-04, 2.78407665e-04, 4.42573279e-04,
#                             3.49255110e-04, 2.91712738e-04, 2.32285179e-04],
#                            [3.23525643e-01, 2.30321351e-04, 9.72030623e-04, 5.67583317e-03,
#                             6.20948456e-01, 3.26910677e-04, 3.54032691e-03, 1.31120432e-03,
#                             1.44426069e-02, 7.11428605e-05, 1.23989976e-02, 3.49345952e-03,
#                             1.23289889e-03, 1.11379061e-03, 8.99087693e-05, 1.10396192e-04,
#                             5.88818194e-04, 3.17198535e-04, 4.98200111e-03, 5.89553618e-04,
#                             2.98705208e-03, 3.90730131e-05, 4.77279685e-05, 1.00963984e-04,
#                             8.29347689e-05, 3.77313163e-05, 4.15218142e-05, 1.13905326e-04,
#                             1.60014755e-04, 1.05813498e-04, 1.18622239e-04, 4.97997614e-05,
#                             3.93582173e-05, 3.34532426e-05, 8.05286222e-05],
#                            [7.44592817e-04, 2.20352049e-04, 9.36597097e-05, 6.23019779e-04,
#                             5.79005301e-04, 3.42742693e-05, 1.19242655e-03, 1.31824819e-03,
#                             4.24310968e-04, 1.67603266e-04, 1.83254077e-03, 4.95334205e-03,
#                             4.20199638e-03, 8.72024498e-04, 9.65660527e-01, 7.33486157e-04,
#                             3.24285064e-03, 1.17686297e-03, 2.00510455e-04, 4.04086852e-03,
#                             6.60355313e-04, 6.17260451e-04, 4.76308177e-04, 2.82484208e-03,
#                             1.83459022e-03, 7.43131051e-05, 8.90549354e-05, 4.96205394e-05,
#                             4.88752437e-05, 2.65541845e-04, 4.09014408e-05, 4.02192867e-05,
#                             5.38114846e-04, 8.26857667e-05, 4.48148739e-05],
#                            [2.89575599e-02, 2.58219671e-03, 4.30355048e-04, 2.89805123e-03,
#                             9.07049655e-01, 5.05236377e-05, 3.43947914e-02, 1.09349637e-02,
#                             1.06610922e-03, 5.04303069e-05, 7.72996089e-03, 1.18968623e-03,
#                             3.92172879e-04, 1.68486966e-04, 6.98627434e-05, 5.26012437e-05,
#                             3.03032714e-04, 2.38627974e-04, 1.69452315e-04, 1.79249721e-04,
#                             3.79193482e-04, 3.27186541e-05, 2.53862066e-05, 8.86214881e-05,
#                             7.66348527e-05, 2.49910642e-05, 3.14709218e-05, 4.77801406e-05,
#                             6.39912488e-05, 1.04183335e-04, 4.37133066e-05, 2.58648563e-05,
#                             4.48610603e-05, 6.12838320e-05, 4.15362595e-05]]))


@fixture()
def mock_training_data():
    df = pd.read_json('../data/mock_category_catbst_training_sample.json')
    df['processed_date'] = pd.to_datetime(df['processed_date'])
    return df


#
@patch('catboost.CatBoostClassifier.predict', return_value=np.array([10])) # full return value - np.array([10, 16, 10, 24, 10])
@pytest.mark.parametrize("input_data,expected", [
    ({"column": "type", "value": "Rock"}, 10),
    ({"column": "type", "value": "Car service"}, 23),
    ({"column": "type", "value": "Rock climbing"}, 6),
])
def test_type_domain_rules(mock_predict, mock_training_data, input_data, expected):
    X = mock_training_data.head(1)
    X[input_data["column"]] = input_data["value"]
    mdl = CategoryCatboost(use_domain_rules=True)
    res = mdl.predict(X)
    assert res == expected
